
import hsa.TextInputFile;
import java.awt.Color;
import java.util.StringTokenizer;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on 10-Jan-2011, 11:07:47 AM
 */
/**
 *
 * @author Jazbel Wang
 */
public class MainMenuFrame extends javax.swing.JFrame {

    //VARIABLE DECLARATION
    BFrame frame = new BFrame();

    /** Creates new form MainMenuFrame */
    public MainMenuFrame() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainMenu1 = new MainMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        loadMItem = new javax.swing.JMenuItem();
        instruction = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        file.setText("File");

        loadMItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadMItem.setText("Load");
        loadMItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMItemActionPerformed(evt);
            }
        });
        file.add(loadMItem);

        instruction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        instruction.setText("Instruction");
        instruction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructionActionPerformed(evt);
            }
        });
        file.add(instruction);

        jMenuBar1.add(file);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Method that loads the saved card
    private void loadMItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMItemActionPerformed
        //Get the information about the images on the card from the file
        TextInputFile tif = new TextInputFile("save.txt");
        //Create the cardMaker based on the type of card saved
        CardMakerFrame cbf = new CardMakerFrame(tif.readLine());
        //Set variables
        int x1, x2, y1, y2; //Coordinates needed to display the images
        int type;   //The integer representation of the image to be displayed
        String s;   //The String of text
        Color colour;   //The colour of the text or line
        //Read the file until the end for the image/line/text data
        while (!tif.eof()) {
            StringTokenizer st = new StringTokenizer(tif.readLine(), "/");
            int type2 = Integer.parseInt(st.nextToken());
            //Get certain data based on the type of image/line/text
            //Using the data received, store a DrawnImages in the array in the drawing area
            if (type2 == cbf.newCard1.drawingArea1.TEXT) {
                x1 = Integer.parseInt(st.nextToken());
                y1 = Integer.parseInt(st.nextToken());
                colour = new Color(Math.abs(Integer.parseInt(st.nextToken())));
                DrawnImages di = new DrawnImages(x1, y1, type2, colour, st.nextToken());
                cbf.newCard1.drawingArea1.images.add(di);
            } else if (type2 == cbf.newCard1.drawingArea1.LINE) {
                x1 = Integer.parseInt(st.nextToken());
                y1 = Integer.parseInt(st.nextToken());
                x2 = Integer.parseInt(st.nextToken());
                y2 = Integer.parseInt(st.nextToken());
                colour = new Color(Math.abs(Integer.parseInt(st.nextToken())));
                DrawnImages di = new DrawnImages(x1, y1, x2, y2, type2, colour);
                cbf.newCard1.drawingArea1.images.add(di);
            } else {
                x1 = Integer.parseInt(st.nextToken());
                y1 = Integer.parseInt(st.nextToken());
                x2 = Integer.parseInt(st.nextToken());
                y2 = Integer.parseInt(st.nextToken());
                DrawnImages di = new DrawnImages(x1, y1, x2, y2, type2);
                cbf.newCard1.drawingArea1.images.add(di);
            }
        }
        //Repaint the drawing area to display the images
        cbf.newCard1.drawingArea1.repaint();
        //Set the title of the cardMaker and the visibility
        cbf.setTitle("Card Maker");
        cbf.setVisible(true);
        //Set the MainMenuFrame of the CardMaker to this frame and set it to invisible
        cbf.mmf = this;
        cbf.mmf.setVisible(false);
    }//GEN-LAST:event_loadMItemActionPerformed
    //Method that opens up a dialog with the instructions
    private void instructionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructionActionPerformed
                JOptionPane.showMessageDialog(frame, "Welcome to Jazbel's Card Maker. "
                + "Feel free to design the card however you want, choose your colour in the bottom taskbar."
                + "\nClick the Images buttons to change to the desired image. Dragging left to right draws an outlined shape, dragging right to left "
                + "\ndraws a filled shape. Click the text button then click the enabled box in the bottom corner, type what you wish, then "
                + "\nhit enter, after hitting enter click where you wish on the screen. The text will then appear where you clicked.");
    }//GEN-LAST:event_instructionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        //Creates the instructions box
        JFrame frame = new JFrame("Instructions");
        JOptionPane.showMessageDialog(frame, "Welcome to Jazbel's Card Maker. Feel free to design the card however you want, choose your colour in the bottom taskbar.\nClick the Images buttons to change to the desired image. Dragging left to right draws an outlined shape, dragging "
                + "\nright to left draws a filled shape. Click the text button then click the enabled box in the bottom corner, type "
                + "\nwhat you wish, then hit enter, after hitting enter click where you wish on the screen. The text will then appear where you clicked.");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Runs the window that contains all the buttons
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MainMenuFrame mmf = new MainMenuFrame();
                mmf.setTitle("Main Menu");
                mmf.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu file;
    private javax.swing.JMenuItem instruction;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem loadMItem;
    private MainMenu mainMenu1;
    // End of variables declaration//GEN-END:variables
}
